FUNCTION_BLOCK "logAnalogDaily12Months"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      bMonthShift : Bool;
      bReset : Bool;
      bFirstScan : Bool;
      rInValue : Real;
      iDay : Int;
   END_VAR

   VAR_OUTPUT RETAIN
      aCurrentMonth : Array[1..#maxDays] of Real;
   END_VAR
   VAR_OUTPUT 
      rLogSignal : Real;
      rAverageSignal : Real;
   END_VAR

   VAR 
      R_TRIG_Reset {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      R_TRIG_Month {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
   END_VAR
   VAR RETAIN
      aLastMonth : Array[1..#maxDays] of Real;
   END_VAR
   VAR 
      i2 : Int;
      i3 : Int;
      i1 : Int;
   END_VAR

   VAR CONSTANT 
      maxDays : Int := 31;
   END_VAR


BEGIN
	//Sparar värdet av rLogSignal i aCurrentMonth under position för dagens datum, vid månadsskifte flyttas innehållet till aLastMonth och aCurrentMonth nollställs
	
	REGION Initialize
	    IF #bFirstScan THEN
	        #rLogSignal := 0.0;
	        #rAverageSignal := 0.0;
	        FOR #i1 := 1 TO #maxDays DO
	            #aCurrentMonth[#i1] := 0.0;
	            #aLastMonth[#i1] := 0.0;
	        END_FOR;
	    END_IF;
	END_REGION ;
	
	// Catch rising edges and create pulse
	#R_TRIG_Reset(CLK := #bReset);
	#R_TRIG_Month(CLK := #bMonthShift);
	
	
	REGION Store values in array at trigger
	    IF #R_TRIG_Reset.Q AND #iDay > 0 AND #iDay <= #maxDays THEN
	        #aCurrentMonth[#iDay] := #rInValue;
	        #rAverageSignal := 0.0;
	        
	        FOR #i2 := 1 TO #maxDays BY 1 DO //Calculate average signal
	            
	            #rAverageSignal := #rAverageSignal + #aCurrentMonth[#i2];
	            IF #aCurrentMonth[#i2] = 0 THEN
	                #rAverageSignal := #rAverageSignal / #i2;
	                EXIT;
	            END_IF;
	        END_FOR;
	        
	    END_IF;
	END_REGION 
	
	REGION New month
	    IF #R_TRIG_Month.Q THEN
	        #aLastMonth := #aCurrentMonth;
	        FOR #i3 := 1 TO #maxDays BY 1 DO
	            #aCurrentMonth[#i3] := 0.0;
	        END_FOR;
	    END_IF;
	END_REGION
	
	#rLogSignal := #rInValue;
	
END_FUNCTION_BLOCK

